AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Sport
Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 180
    MemorySize: 128
    Runtime: nodejs20.x
    Architectures:
      - x86_64
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SportAppUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: SportAppPoolClient
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH # See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      GenerateSecret: false

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/auth/register-user.handler
      Description: Register new user api
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST

  EmailConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/auth/email-confirm.handler
      Description: Confirm user email
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/email-confirm
            Method: POST

  LoginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/auth/login.handler
      Description: Login user
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST

  GetProdListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/prod/get-prod-list.handler
      Description: Get prod list with pagination
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /prod/list
            Method: GET

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
